#lang racket

;; Copyright 2015-2016 John Clements (clements@racket-lang.org)
;; released under Mozilla Public License 2.0

(require racket/runtime-path
         racket/block)

(provide (contract-out
          [start-scsynth
           (-> (list/c fixnum?
                       (listof string?)
                       input-port?
                       (-> void?)))]
          [shutdown-scsynth (-> void)]))

(define-runtime-path here ".")
(define SCSYNTH-PATH-MAC (build-path here "scsynth"))
;; NB: requires SuperCollider-3.8.0 on C drive. Way too restrictive.
(define SCSYNTH-PATH-WIN (build-path "C://Program Files//SuperCollider-3.8.0//scsynth.exe"))

;; honestly, all of this machinery is a bit silly.
(define rng (vector->pseudo-random-generator
             (vector #x57180d1c 1 2 3 4 5)))

;; generate a random udp socket number in the dynamically assigned
;; range specified by the iana:
(define MIN-DYNAMIC-UDP 49152)
(define MAX-DYNAMIC-UDP 65535)
(define (random-udp-port)
  (+ (random (- MAX-DYNAMIC-UDP MIN-DYNAMIC-UDP) rng)
     MIN-DYNAMIC-UDP))

;; random, but always the same random.
(define persistent-random-udp-port-stream
  (let loop ()
    (stream-cons (random-udp-port)
                 (loop))))

;; FRAGILE: not clear how best to check that the server came up cleanly.
(define SUCCESSFUL-START-LINE "SuperCollider 3 server ready.")
;; FRAGILE: not clear how to check that the udp port is already taken.
(define UDP-TAKEN-MSG "unable to bind udp socket")
;; wait this many seconds before giving up on server startup
(define STARTUP-WAIT 5.0)


;; given an index into the stream of udp port numbers,
;; try to bring the server up on that udp port (also
;; takes the one before it, IIRC). If it fails with "unable to bind udp
;; socket", try again with the udp socket number increased by two.
;;
;; note: the -a, -m, and -D arguments come from sonic
;; pi, and I can't comment on their necessity, though I can tell you
;; what --help has to say:
;; -a : # of audio buses
;; -m : real-time memory size
;; -D : load default synthdefs? (1=yes,0=no)
(define (try-startup udp-port-idx)
  (define udp-port (stream-ref persistent-random-udp-port-stream
                               udp-port-idx))
  (match-define (list from-port to proc-id err control-proc)
    (parameterize ([current-subprocess-custodian-mode 'kill])
      (os-specific-startup udp-port)))
  
  (printf "started scsynth with process id ~v\n" proc-id)
  
  (define startup-status (make-channel))
  
  ;; all of the lines of output generated by the
  ;; server process, in reverse order
  (define lines-of-output (list))
  
  ;; record and display lines of output until successful startup, then
  ;; send a signal and halt
  (thread
   (λ ()
     (let ([seen-success? #f])
       (let loop ()
         (define next-line (read-line from-port))
         (set! lines-of-output (cons next-line lines-of-output))
         ;(display next-line)
         ;(newline)
         (cond [(eof-object? next-line) 'process-done]
               [(equal? (string-trim next-line) SUCCESSFUL-START-LINE)
                (channel-put startup-status 'server-up)]
               [else (loop)])))))
  
  ;; signal 
  (thread
   (λ ()
     (control-proc 'wait)
     (channel-put startup-status
                  (list 'exit-code (control-proc 'exit-code)))))
  
  (match (sync/timeout STARTUP-WAIT startup-status)
    [#f
     (printf "startup status: ~v" startup-status)
     (error 'server-startup
               "server startup timed out. Perhaps the success message has changed?")]
    [(list 'exit-code 1)
     ;; wait for the rest of the output to arrive
     (sleep 1.0)
     (match lines-of-output
       [(list-rest (? eof-object?) "" (regexp (regexp-quote UDP-TAKEN-MSG)) _)
        (try-startup (add1 udp-port-idx))]
       [other
        (error 'server-startup
               "server process halted with exit code 1. Not sure why. next to Last line: ~v\n"
               (cadr lines-of-output))
        ])]
    [(list 'exit-code n)
     (error 'server-startup
            "server process halted with exit code ~v. Not sure why."
            n)]
    ['server-up
     (list udp-port
           (reverse lines-of-output)
           from-port
           (λ () (control-proc 'kill)))]
    [other
     (error 'server-startup
            "internal error: unexpected result from startup: ~e"
            other)]))

;; start scsynth as required by the current operating system
(define (os-specific-startup udp-port)
  (match (system-type)
    ['macosx (process* SCSYNTH-PATH-MAC
                       "-a" "1024"
                       "-m" "131071"
                       "-D" "0"
                       "-u" (number->string udp-port))]
    ['unix (process (string-append "scsynth -a 1024 -m 131071 -D 0 -R 0 -l 1 -i 16 -o 16 -u "
                                   (number->string udp-port)))]
    ;boot_and_wait(scsynth_path, "-u", @port.to_s, "-a", num_audio_busses_for_current_os.to_s,
    ;"-m", "131072", "-D", "0", "-R", "0", "-l", "1", "-i", "16", "-o", "16", "-b", num_buffers_for_current_os.to_s,
    ;"-U", "#{native_path}/plugins/", "-B", "127.0.0.1")
    ['windows (process* SCSYNTH-PATH-WIN
                        "-u" (number->string udp-port)
                        "-m" "131071"
                        "-D" "0"
                        "-R" "0"
                        "-l" "1"
                        "-i" "16"
                        "-o" "16"
                        "-B" "127.0.0.1")]
    [else (error 'startup "I don't recognize your operating system")]))

;; start the scsynth server:
(define (start-scsynth)
  (try-startup 0))

;; once finished on unix, you need to kill jack or
;; the ports remain in use and jack hijacks your audio
;; for all other programs
(define (shutdown-scsynth)
  (printf "Shutting down scsynth...");
  (flush-output)
  (match (system-type)
    ['windows (process "Taskkill /IM scsynth.exe /F")]
    [else (begin (process "killall -9 jackd")
                 (process "killall -9 scsynth"))])
  (printf "done\n"))

(module+ test
  (require rackunit)

  (match-define (list udp-port headers server-stdout killer)
    (start-scsynth))
  (check-match udp-port (? exact-nonnegative-integer?))
  (check-match headers (list (? string?) ...))
  (check-match server-stdout (? input-port?))
  (check-match killer (? procedure?))

  ;; clean up....
  (killer)
  (shutdown-scsynth))
