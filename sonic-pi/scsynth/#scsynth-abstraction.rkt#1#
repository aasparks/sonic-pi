#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1517 0 29 3 12 #"#lang racket"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 63
#";; Copyright 2015-2016 John Clements (clements@racket-lang.org)"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";; released under Mozilla Public License 2.0"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 76
(
 #";; this file provides a simpler interface to scysnth. This file star"
 #"ted life"
) 0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; as a simple packet capture, watching to see how (the real) sonic "
 #"PI"
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; interacted with scsynth. At this point, it's still doing lots of "
 #"things"
) 0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; that don't make any sense for this project, e.g. creating a 'reco"
 #"rding'"
) 0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #";; and an 'fx' group, even though there aren't any recording or FX m"
 #"echanisms."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 27 #"\"scsynth-communication.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 18 #"\"../allocator.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 31 #"\"../data-structures/common.rkt\""
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 10 #"for-syntax"
0 0 25 3 1 #" "
0 0 14 3 12 #"syntax/parse"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 3 #"osc"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 19 #"racket/runtime-path"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 20 #"racket/async-channel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"provide"
0 0 25 3 2 #" ("
0 0 14 3 12 #"contract-out"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 7 #"startup"
0 0 25 3 2 #" ("
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"ctxt?"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 9 #"start-job"
0 0 25 3 2 #" ("
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"ctxt?"
0 0 25 3 1 #" "
0 0 14 3 9 #"job-ctxt?"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 10 #"play-synth"
0 0 25 3 2 #" ("
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"job-ctxt?"
0 0 25 3 1 #" "
0 0 14 3 6 #"bytes?"
0 0 25 3 1 #" "
0 0 14 3 13 #"inexact-real?"
0 0 25 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Param?"
0 0 25 3 2 #") "
0 0 14 3 5 #"void?"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 7 #"end-job"
0 0 25 3 2 #" ("
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 9 #"job-ctxt?"
0 0 25 3 1 #" "
0 0 14 3 5 #"void?"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ["
0 0 14 3 16 #"synchronize/ctxt"
0 0 25 3 2 #" ("
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"ctxt?"
0 0 25 3 1 #" "
0 0 14 3 5 #"void?"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 9 #"ctxt-comm"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 13 #"job-ctxt-ctxt"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 7 #"load-fx"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 14 #"wait-for-nodes"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 14 3 16 #"shutdown-scsynth"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 19 #"define-runtime-path"
0 0 25 3 1 #" "
0 0 14 3 4 #"here"
0 0 25 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"SYNTHDEF-PATH"
0 0 25 3 2 #" ("
0 0 14 3 10 #"build-path"
0 0 25 3 1 #" "
0 0 14 3 4 #"here"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"synthdefs\""
0 0 25 3 1 #" "
0 0 19 3 10 #"\"compiled\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"unless"
0 0 25 3 2 #" ("
0 0 14 3 17 #"directory-exists?"
0 0 25 3 1 #" "
0 0 14 3 13 #"SYNTHDEF-PATH"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 13 #"synthdef-path"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 19 3 34 #"\"expected synthdefs at path: ~v\\n\""
0 0 25 3 1 #" "
0 0 14 3 13 #"SYNTHDEF-PATH"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-logger"
0 0 25 3 1 #" "
0 0 14 3 8 #"sonic-pi"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 67
(
 #";(define OUTPUT-LOG (open-output-file \"log.txt\" #:exists 'replace)"
 #")"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; this represents the context of a running sonic pi graph, containi"
 #"ng"
) 0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; the 'comm' structure, the group of the mixers and the group of th"
 #"e"
) 0 0 25 29 1 #"\n"
0 0 17 3 15 #";; synth groups"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"ctxt"
0 0 25 3 2 #" ("
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 3 1 #" "
0 0 14 3 17 #"synth-group-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"fx-group"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 66
#";; this represents the context of a single job, containing a ctxt,"
0 0 25 29 1 #"\n"
0 0 17 3 59
#";; the job-specific mixer, and the job-specific synth-group"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 2 #" ("
0 0 14 3 4 #"ctxt"
0 0 25 3 1 #" "
0 0 14 3 5 #"mixer"
0 0 25 3 1 #" "
0 0 14 3 11 #"synth-group"
0 0 25 3 2 #") "
0 0 24 3 13 #"#:transparent"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; store all allocated node id's"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-nodes"
0 0 25 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";; represents a synth or group ID"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 3 #"ID?"
0 0 25 3 1 #" "
0 0 14 3 26 #"exact-nonnegative-integer?"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 17 #"nonnegative-real?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"real?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 2 #"<="
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"note-num?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"real?"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"<"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 24 #";; don't test this file:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"module"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";; call the lower-level synchronize on a context"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"synchronize/ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"synchronize"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ctxt-comm"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-ctxt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; experimentation suggests that scsynth doesn't ever handle 64-bit "
 #"ints."
) 0 0 25 29 1 #"\n"
0 0 17 3 68
#";; here's the error message on trying to create a node with id 2^39:"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; [ \"#bundle\", -2791018499003203584,"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";;    [ \"/s_new\", \"sonic-pi-beep\", !unknown tag 'h' 0x68 ! ]"
0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; (I also get the sense that scsynth should be printing the timesta"
 #"mp"
) 0 0 25 29 1 #"\n"
0 0 17 3 25 #";; as an unsigned int...)"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #";; establish communication with scsynth, kill everything that's runn"
 #"ing,"
) 0 0 25 29 1 #"\n"
0 0 17 3 70
(
 #";; and create a new graph. This architecture comes straight from Son"
 #"ic"
) 0 0 25 29 1 #"\n"
0 0 17 3 62
#";; Pi. If it works for them, I'm assuming it will work for us."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"startup"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"match-define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 14 3 14 #"scsynth-stdout"
0 0 25 3 3 #") ("
0 0 14 3 9 #"comm-open"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 20 #"start-logging-thread"
0 0 25 3 1 #" "
0 0 14 3 14 #"scsynth-stdout"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 11 #"#\"/dumpOSC\""
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"synchronize"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 66
#";; clear the server and create the groups & mixer that we'll need:"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 14 #"#\"/clearSched\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 13 #"#\"/g_freeAll\""
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 10 #"#\"/notify\""
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 13 #"#\"/d_loadDir\""
0 0 25 3 2 #" ("
0 0 14 3 19 #"string->bytes/utf-8"
0 0 25 29 1 #"\n"
0 0 25 3 41 #"                                        ("
0 0 14 3 12 #"path->string"
0 0 25 3 1 #" "
0 0 14 3 13 #"SYNTHDEF-PATH"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"synchronize"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 58
#";; sonic-pi reads in rand-stream.wav buffer, so i will too"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 15 #"#\"/b_allocRead\""
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 19 #"string->bytes/utf-8"
0 0 25 3 2 #" ("
0 0 14 3 12 #"path->string"
0 0 25 29 1 #"\n"
0 0 25 3 39 #"                                      ("
0 0 14 3 10 #"build-path"
0 0 25 3 1 #" "
0 0 14 3 4 #"here"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"buffers\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"rand-stream.wav\""
0 0 25 3 4 #"))) "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"synchronize"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 14 #"#\"/clearSched\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 13 #"#\"/g_freeAll\""
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 53 #";; I don't think the current architecture is properly"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 52 #";; guaranteeing that things get freed; specifically,"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 61
#";; things in these groups might not be freed by the g_freeAll"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 67
#";; above. Curiously, scsynth's deepFree doesn't free nested groups."
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 3 6 #"     ("
0 0 14 3 9 #"new-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 10 #"ROOT-GROUP"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"fx-group"
0 0 25 3 9 #"        ("
0 0 14 3 9 #"new-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"before"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"synth-group"
0 0 25 3 6 #"     ("
0 0 14 3 9 #"new-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"before"
0 0 25 3 1 #" "
0 0 14 3 8 #"fx-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"recording-group"
0 0 25 3 2 #" ("
0 0 14 3 9 #"new-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"after"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 13 #"#\"/d_loadDir\""
0 0 25 3 2 #" ("
0 0 14 3 19 #"string->bytes/utf-8"
0 0 25 29 1 #"\n"
0 0 25 3 41 #"                                        ("
0 0 14 3 12 #"path->string"
0 0 25 3 1 #" "
0 0 14 3 13 #"SYNTHDEF-PATH"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"synchronize"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"mixer"
0 0 25 3 2 #" ("
0 0 14 3 9 #"new-synth"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 19 3 17 #"#\"sonic-pi-mixer\""
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                           "
0 0 19 3 9 #"#\"in_bus\""
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"send-command/elt"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 25 3 3 #"#s("
0 0 14 3 11 #"osc-message"
0 0 25 3 1 #" "
0 0 19 3 9 #"#\"/n_set\""
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 29 3 1 #","
0 0 14 3 5 #"mixer"
0 0 25 3 1 #" "
0 0 19 3 16 #"#\"invert_stereo\""
0 0 25 3 1 #" "
0 0 22 3 3 #"0.0"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"send-command/elt"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"`"
0 0 25 3 3 #"#s("
0 0 14 3 11 #"osc-message"
0 0 25 3 1 #" "
0 0 19 3 9 #"#\"/n_set\""
0 0 25 29 1 #"\n"
0 0 25 3 46 #"                                             ("
0 0 29 3 1 #","
0 0 14 3 5 #"mixer"
0 0 25 3 1 #" "
0 0 19 3 13 #"#\"force_mono\""
0 0 25 3 1 #" "
0 0 22 3 3 #"0.0"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"synchronize"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-comm"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 3 1 #" "
0 0 14 3 11 #"synth-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"fx-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; read lines from input port, log to debug. Stop when we get #<eof>"
 #"."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"start-logging-thread"
0 0 25 3 1 #" "
0 0 14 3 13 #"server-stdout"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"thread"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 15 3 2 #"\316\273"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 1 #" "
0 0 14 3 4 #"loop"
0 0 25 3 3 #" ()"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"next-line"
0 0 25 3 2 #" ("
0 0 14 3 9 #"read-line"
0 0 25 3 1 #" "
0 0 14 3 13 #"server-stdout"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 11 #"eof-object?"
0 0 25 3 1 #" "
0 0 14 3 9 #"next-line"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 8 #"all-done"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 17 3 29 #";(write next-line OUTPUT-LOG)"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 18 #"log-sonic-pi-debug"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"[scsynth-stdout] \""
0 0 25 3 1 #" "
0 0 14 3 9 #"next-line"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 4 #"loop"
0 0 25 3 7 #")])))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";; given the comm, a placement command, and a node ID,"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";; create a new group in the specified location."
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; return the new ID"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"new-group"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 14 3 17 #"placement-command"
0 0 25 3 1 #" "
0 0 14 3 11 #"relative-to"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 2 #" ("
0 0 14 3 14 #"fresh-node-id!"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"command-num"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 25 #"placement-command->number"
0 0 25 3 1 #" "
0 0 14 3 17 #"placement-command"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 19 3 9 #"#\"/g_new\""
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 1 #" "
0 0 14 3 11 #"command-num"
0 0 25 3 1 #" "
0 0 14 3 11 #"relative-to"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 11 #"new-node-id"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 68
#";; create a new synth node, using the given name, placement-command,"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";; relative-to, and arguments."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"new-synth"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 14 3 13 #"synthdef-name"
0 0 25 3 1 #" "
0 0 14 3 17 #"placement-command"
0 0 25 3 1 #" "
0 0 14 3 11 #"relative-to"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 2 #" ("
0 0 14 3 14 #"fresh-node-id!"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"command-num"
0 0 25 3 2 #" ("
0 0 14 3 25 #"placement-command->number"
0 0 25 3 1 #" "
0 0 14 3 17 #"placement-command"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"send-command/elt"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 4 #"comm"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 11 #"osc-message"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 19 3 9 #"#\"/s_new\""
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 13 #"synthdef-name"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 1 #" "
0 0 14 3 11 #"command-num"
0 0 25 3 1 #" "
0 0 14 3 11 #"relative-to"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"     "
0 0 14 3 4 #"args"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 11 #"new-node-id"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; convert a placement command symbol to the corresponding number"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";; (defined in the scsynth API)"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 25 #"placement-command->number"
0 0 25 3 1 #" "
0 0 14 3 2 #"pc"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 2 #"pc"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 1 #"'"
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 1 #"'"
0 0 14 3 4 #"tail"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 1 #"'"
0 0 14 3 6 #"before"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 1 #"'"
0 0 14 3 5 #"after"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 22 3 1 #"'"
0 0 14 3 7 #"replace"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 72
(
 #";; this could be WAY more structured. For now, it's just \"something"
 #" that"
) 0 0 25 29 1 #"\n"
0 0 17 3 69
(
 #";; appears to work.\" I think I probably shouldn't spend a lot of ti"
 #"me"
) 0 0 25 29 1 #"\n"
0 0 17 3 73
(
 #";; building abstractions until I have some idea what abstractions I "
 #"need."
) 0 0 25 29 1 #"\n"
0 0 17 3 36 #";; \"premature abstraction\" etc. etc."
0 0 25 29 1 #"\n"
0 0 17 3 27 #";; this one already exists:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"ROOT-GROUP"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; send a single message inside of a bundle with a timestamp"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 20 #"send-bundled-message"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 14 3 4 #"time"
0 0 25 3 1 #" "
0 0 14 3 7 #"address"
0 0 25 3 1 #" "
0 0 29 3 1 #"."
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"send-command/elt"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 4 #"comm"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 10 #"osc-bundle"
0 0 25 3 2 #" ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 4 #"time"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ["
0 0 22 3 1 #"'"
0 0 14 3 3 #"now"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 3 #"now"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 22 #"milliseconds->osc-date"
0 0 25 3 1 #" "
0 0 14 3 4 #"time"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 11 #"osc-message"
0 0 25 3 1 #" "
0 0 14 3 7 #"address"
0 0 25 3 1 #" "
0 0 14 3 4 #"args"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";; play a synth (note or sample) at the given time"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"play-synth"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"time"
0 0 25 3 1 #" "
0 0 14 3 6 #"params"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 2 #" ("
0 0 14 3 14 #"fresh-node-id!"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 9 #"hash-set!"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-nodes"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 1 #" "
0 0 22 3 2 #"#t"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 20 #"send-bundled-message"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"ctxt-comm"
0 0 25 3 2 #" ("
0 0 14 3 13 #"job-ctxt-ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 4 #"time"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 19 3 9 #"#\"/s_new\""
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 4 #"name"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 11 #"new-node-id"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 25 #"placement-command->number"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"tail"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 20 #"job-ctxt-synth-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 10 #"param->osc"
0 0 25 3 1 #" "
0 0 14 3 6 #"params"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #";; load an fx"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"load-fx"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"time"
0 0 25 3 1 #" "
0 0 14 3 6 #"params"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 11 #"new-node-id"
0 0 25 3 2 #" ("
0 0 14 3 14 #"fresh-node-id!"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 20 #"send-bundled-message"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 9 #"ctxt-comm"
0 0 25 3 2 #" ("
0 0 14 3 13 #"job-ctxt-ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 4 #"time"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 19 3 9 #"#\"/s_new\""
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 4 #"name"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 11 #"new-node-id"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 25 #"placement-command->number"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"head"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 13 #"ctxt-fx-group"
0 0 25 3 2 #" ("
0 0 14 3 13 #"job-ctxt-ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 10 #"param->osc"
0 0 25 3 1 #" "
0 0 14 3 6 #"params"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";; start a job. I don't even know what a job is!"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 9 #"start-job"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"match-define"
0 0 25 3 2 #" ("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"ctxt"
0 0 25 3 2 #" ("
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 3 1 #" "
0 0 14 3 17 #"synth-group-group"
0 0 25 3 1 #" "
0 0 14 3 8 #"fx-group"
0 0 25 3 3 #")) "
0 0 14 3 8 #"the-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 15 #"job-synth-group"
0 0 25 3 2 #" ("
0 0 14 3 9 #"new-group"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"tail"
0 0 25 3 1 #" "
0 0 14 3 17 #"synth-group-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 71
(
 #";; see note at beginning about params here, all borrowed from Sonic "
 #"PI."
) 0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"job-mixer"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 9 #"new-synth"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 23 #"#\"sonic-pi-basic_mixer\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 1 #"'"
0 0 14 3 4 #"head"
0 0 25 3 1 #" "
0 0 14 3 11 #"mixer-group"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 6 #"#\"amp\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 12 #"#\"amp_slide\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 3 #"0.1"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 18 #"#\"amp_slide_shape\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 1 #"1"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 18 #"#\"amp_slide_curve\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 1 #"0"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 9 #"#\"in_bus\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 2 #"12"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 19 3 10 #"#\"out_bus\""
0 0 25 29 1 #"\n"
0 0 25 3 15 #"               "
0 0 22 3 2 #"10"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 8 #"job-ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"the-ctxt"
0 0 25 3 1 #" "
0 0 14 3 9 #"job-mixer"
0 0 25 3 1 #" "
0 0 14 3 15 #"job-synth-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 68
#";; end a job. Code ported directly from Sonic Pi. It looks like this"
0 0 25 29 1 #"\n"
0 0 17 3 68
#";; fades out the mixer associated with the job and then frees it and"
0 0 25 29 1 #"\n"
0 0 17 3 24 #";; its associated synths"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"end-job"
0 0 25 3 1 #" "
0 0 14 3 12 #"the-job-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 12 #"match-define"
0 0 25 3 2 #" ("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                  (("
0 0 15 3 6 #"struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"ctxt"
0 0 25 3 2 #" ("
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 14 3 2 #"_1"
0 0 25 3 1 #" "
0 0 14 3 2 #"_2"
0 0 25 3 1 #" "
0 0 14 3 2 #"_3"
0 0 25 3 3 #")) "
0 0 14 3 9 #"job-mixer"
0 0 25 3 1 #" "
0 0 14 3 15 #"job-synth-group"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 12 #"the-job-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 19 3 9 #"#\"/n_set\""
0 0 25 3 1 #" "
0 0 14 3 9 #"job-mixer"
0 0 25 3 1 #" "
0 0 19 3 12 #"#\"amp_slide\""
0 0 25 3 1 #" "
0 0 22 3 3 #"1.0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 19 3 9 #"#\"/n_set\""
0 0 25 3 1 #" "
0 0 14 3 9 #"job-mixer"
0 0 25 3 1 #" "
0 0 19 3 6 #"#\"amp\""
0 0 25 3 1 #" "
0 0 22 3 3 #"0.0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"sleep"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 19 3 10 #"#\"/n_free\""
0 0 25 3 1 #" "
0 0 14 3 9 #"job-mixer"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 12 #"send-command"
0 0 25 3 1 #" "
0 0 14 3 4 #"comm"
0 0 25 3 1 #" "
0 0 19 3 10 #"#\"/n_free\""
0 0 25 3 1 #" "
0 0 14 3 15 #"job-synth-group"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"sleep"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 57 #";; for now this is needed for more than one run to happen"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 66
#";; when there are multiple jobs going on this will need to change."
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 17 3 31 #";; will there be multiple jobs?"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 16 #"shutdown-scsynth"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";; loops until all nodes have received the"
0 0 25 29 1 #"\n"
0 0 17 3 16 #";; n\\end message"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 14 #"wait-for-nodes"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 16 #"all-nodes-ended?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"comm-incoming"
0 0 25 3 2 #" ("
0 0 14 3 9 #"ctxt-comm"
0 0 25 3 2 #" ("
0 0 14 3 13 #"job-ctxt-ctxt"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"void"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 14 #"wait-for-nodes"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 47 #";; determines if every allocated node has ended"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 16 #"all-nodes-ended?"
0 0 25 3 1 #" "
0 0 14 3 8 #"incoming"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"empty?"
0 0 25 3 2 #" ("
0 0 14 3 5 #"remv*"
0 0 25 3 2 #" ("
0 0 14 3 15 #"get-ended-nodes"
0 0 25 3 3 #") ("
0 0 14 3 9 #"hash-keys"
0 0 25 3 1 #" "
0 0 14 3 9 #"all-nodes"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"module+"
0 0 25 3 1 #" "
0 0 14 3 4 #"main"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"../data-structures/note.rkt\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 4 #"ctxt"
0 0 25 3 2 #" ("
0 0 14 3 7 #"startup"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 2 #" ("
0 0 14 3 9 #"start-job"
0 0 25 3 1 #" "
0 0 14 3 4 #"ctxt"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #" ("
0 0 14 3 4 #"note"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"zawa"
0 0 25 3 1 #" "
0 0 22 3 2 #"60"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 10 #"play-synth"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 10 #"Score-name"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 4 #"1000"
0 0 25 3 2 #" ("
0 0 14 3 28 #"current-inexact-milliseconds"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 11 #"note-params"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"sleep"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"end-job"
0 0 25 3 1 #" "
0 0 14 3 8 #"job-ctxt"
0 0 25 3 2 #"))"
0           0
